'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _d2 = require('d3');

var _d3 = _interopRequireDefault(_d2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Default config.
 */

var defaults = {
  // target element or selector to contain the svg
  target: '#chart',

  // width of chart
  width: 500,

  // height of chart
  height: 130,

  // margin
  margin: { top: 15, right: 0, bottom: 35, left: 60 },

  // enable axis
  axis: true,

  // axis padding
  axisPadding: 5,

  // axis tick size
  tickSize: 10,

  // padding between bars
  barPadding: 13,

  // nice round values for axis
  nice: false,

  // custom x domain
  xDomain: null,

  // custom y domain
  yDomain: null,

  // color range
  color: null,

  // color interpolation
  colorInterpolate: _d3.default.interpolateHcl,

  // easing function for transitions
  ease: 'linear',

  // type of bar: rounded-rect, rect
  type: 'rounded',

  // mouseover callback for tooltips or value display
  mouseover: function mouseover(_) {},

  // mouseout callback for tooltips or value display
  mouseout: function mouseout(_) {}
};

/**
 * Zeroed margin.
 */

var zeroMargin = { top: 0, right: 0, bottom: 0, left: 0 };

/**
 * BarChart.
 */

var BarChart = function () {

  /**
   * Construct with the given `config`.
   */

  function BarChart(config) {
    _classCallCheck(this, BarChart);

    this.set(config);
    if (!this.axis) this.margin = zeroMargin;
    this.init();
  }

  /**
   * Set configuration options.
   */

  _createClass(BarChart, [{
    key: 'set',
    value: function set(config) {
      Object.assign(this, defaults, config);
    }

    /**
     * Dimensions without margin.
     */

  }, {
    key: 'dimensions',
    value: function dimensions() {
      var width = this.width;
      var height = this.height;
      var margin = this.margin;

      var w = width - margin.left - margin.right;
      var h = height - margin.top - margin.bottom;
      return [w, h];
    }

    /**
     * Handle mouseover.
     */

  }, {
    key: 'onMouseOver',
    value: function onMouseOver() {
      var m = _d3.default.mouse(this.chart.node());
      var x = this.x.invert(m[0]);
      var i = this.xBisect(this.data, x, 1);
      var data = this.data[i - 1];
      this.mouseover(data);
    }

    /**
     * Handle mouseleave.
     */

  }, {
    key: 'onMouseLeave',
    value: function onMouseLeave() {
      this.mouseout();
    }

    /**
     * Initialize the chart.
     */

  }, {
    key: 'init',
    value: function init() {
      var _this = this;

      var target = this.target;
      var width = this.width;
      var height = this.height;
      var margin = this.margin;
      var axisPadding = this.axisPadding;
      var tickSize = this.tickSize;
      var axis = this.axis;
      var color = this.color;
      var colorInterpolate = this.colorInterpolate;

      var _dimensions = this.dimensions();

      var _dimensions2 = _slicedToArray(_dimensions, 2);

      var w = _dimensions2[0];
      var h = _dimensions2[1];


      this.chart = _d3.default.select(target).attr('width', width).attr('height', height).append('g').attr('transform', 'translate(' + margin.left + ', ' + margin.top + ')').on('mouseover', function (_) {
        return _this.onMouseOver();
      }).on('mouseleave', function (_) {
        return _this.onMouseLeave();
      });

      if (color) {
        this.color = _d3.default.scale.linear().interpolate(colorInterpolate).range(color);
      }

      this.x = _d3.default.time.scale().range([0, w]);

      this.y = _d3.default.scale.linear().range([h, 0]);

      this.xAxis = _d3.default.svg.axis().orient('bottom').scale(this.x).ticks(5).tickPadding(8).tickSize(tickSize);

      this.yAxis = _d3.default.svg.axis().orient('left').scale(this.y).ticks(3).tickPadding(8).tickSize(tickSize);

      if (axis) {
        this.chart.append('g').attr('class', 'x axis').attr('transform', 'translate(0, ' + (h + axisPadding) + ')').call(this.xAxis);

        this.chart.append('g').attr('class', 'y axis').attr('transform', 'translate(' + -axisPadding + ', 0)').call(this.yAxis);
      }

      this.xBisect = _d3.default.bisector(function (d) {
        return d.bin;
      }).left;
    }

    /**
     * Render axis.
     */

  }, {
    key: 'renderAxis',
    value: function renderAxis(data, options) {
      var chart = this.chart;
      var x = this.x;
      var y = this.y;
      var xAxis = this.xAxis;
      var yAxis = this.yAxis;
      var nice = this.nice;
      var ease = this.ease;
      var color = this.color;
      var xDomain = this.xDomain;
      var yDomain = this.yDomain;


      var yExtent = yDomain || _d3.default.extent(data, function (d) {
        return d.value;
      });
      var xd = x.domain(xDomain || _d3.default.extent(data, function (d) {
        return d.bin;
      }));
      var yd = y.domain(yExtent);

      if (color) color.domain(yExtent);

      if (nice) {
        xd.nice();
        yd.nice();
      }

      var c = options.animate ? chart.transition().ease(ease) : chart;

      c.select('.x.axis').call(xAxis);
      c.select('.y.axis').call(yAxis);
    }

    /**
     * Render bars.
     */

  }, {
    key: 'renderBars',
    value: function renderBars(data, _ref) {
      var animate = _ref.animate;
      var chart = this.chart;
      var x = this.x;
      var y = this.y;
      var ease = this.ease;
      var barPadding = this.barPadding;
      var type = this.type;
      var color = this.color;

      var _dimensions3 = this.dimensions();

      var _dimensions4 = _slicedToArray(_dimensions3, 2);

      var w = _dimensions4[0];
      var h = _dimensions4[1];


      var width = w / data.length;
      var barWidth = width - barPadding;
      if (barWidth < 1) throw new Error('BarChart is too small for the amount of data provided');

      var column = chart.selectAll('.column').data(data);

      // enter
      column.enter().append('rect').attr('class', 'column');

      // update
      (animate ? column.transition().ease(ease) : column).attr('x', function (d) {
        return x(d.bin);
      }).attr('rx', type == 'rounded' ? barWidth / 2 : 0).attr('ry', type == 'rounded' ? barWidth / 2 : 0).attr('width', barWidth).attr('height', h);

      // exit
      column.exit().remove();

      var bar = chart.selectAll('.bar').data(data);

      // enter
      bar.enter().append('rect').attr('class', 'bar');

      // update
      (animate ? bar.transition().ease(ease) : bar).attr('x', function (d) {
        return x(d.bin);
      }).attr('y', function (d) {
        return y(d.value);
      }).attr('rx', type == 'rounded' ? barWidth / 2 : 0).attr('ry', type == 'rounded' ? barWidth / 2 : 0).attr('width', barWidth).attr('height', function (d) {
        return h - y(d.value);
      });

      if (color) bar.style('fill', function (d) {
        return color(d.value);
      });

      // exit
      bar.exit().remove();

      var overlay = chart.selectAll('.overlay').data(data);

      // enter
      overlay.enter().append('rect').attr('class', 'overlay');

      // update
      overlay.attr('x', function (d) {
        return x(d.bin);
      }).attr('width', width).attr('height', h).style('fill', 'transparent');

      // exit
      overlay.exit().remove();
    }

    /**
     * Render the chart against the given `data` which should be
     * an array of objects with `bin` and `value` properties.
     */

  }, {
    key: 'render',
    value: function render(data) {
      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      this.data = data;
      this.renderAxis(data, options);
      this.renderBars(data, options);
    }

    /**
     * Update the chart against the given `data`.
     */

  }, {
    key: 'update',
    value: function update(data) {
      var options = arguments.length <= 1 || arguments[1] === undefined ? { animate: true } : arguments[1];

      this.render(data, options);
    }
  }]);

  return BarChart;
}();

exports.default = BarChart;